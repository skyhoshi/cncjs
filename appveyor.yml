# https://www.appveyor.com/docs/build-environment/#build-worker-images
image:
  - macos
  - Ubuntu
  - Visual Studio 2019

version: "{build}-{branch}"

environment:
  matrix:
    - nodejs_version: "12"
  global:
    GITHUB_TOKEN:
      secure: 14dS/9loZ4uMoKGOHGkagaYp5oS30HSIQcPB0FEa7aTEfpb2VJQiUms82hv8nWxY

for:
  # macos
  -
    matrix:
      only:
        - image: macos
      fast_finish: true

    init:
      - uname -a
      - git --version
      - git config --global core.autocrlf false
      - git config --global user.name "AppVeyor"
      - git config --global user.email "appveyor@ci.appveyor.com"
      - sh: |
          export CI_BRANCH=$APPVEYOR_REPO_BRANCH
          export CI_BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER
          export CI_COMMIT=$APPVEYOR_REPO_COMMIT
          export CI_COMMIT_SHORT=${APPVEYOR_REPO_COMMIT:0:8}
          export CI_COMMIT_TIMESTAMP=$APPVEYOR_REPO_COMMIT_TIMESTAMP
          export CI_TAG=$APPVEYOR_REPO_TAG_NAME
          echo "• ARCH=$ARCH"
          echo "• CI_BRANCH=$CI_BRANCH"
          echo "• CI_BUILD_NUMBER=$CI_BUILD_NUMBER"
          echo "• CI_COMMIT=$CI_COMMIT"
          echo "• CI_COMMIT_SHORT=$CI_COMMIT_SHORT"
          echo "• CI_COMMIT_TIMESTAMP=$CI_COMMIT_TIMESTAMP"
          echo "• CI_TAG=$CI_TAG"

    install:
      - nvm install $nodejs_version
      - security import "scripts/certs/Certum-Code-Signing-CA-SHA2.cer" -k ~/Library/Keychains/login.keychain -T /usr/bin/codesign
      - npm config set loglevel warn
      - npm config set scripts-prepend-node-path auto
      - npm install -g npm
      - npm install -g yarn
      - yarn

    build_script:
      - sh: |
          yarn clean
          yarn lint
          yarn test
          if [[ -z "$CI_TAG" ]]; then
            yarn build-latest
          else
            yarn build
          fi
      - sh: |
          # build:mac-x64
          GIT_COMMIT_LOG=`git log -1 --format='%ci %H %s'`
          PACKAGE_NAME=`node -e "console.log(require('./src/package.json').name)"`
          PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
          PRODUCT_NAME=CNCjs
          yarn build:mac-x64
          ls -al output output/*
          mkdir -p releases/macos
          cp -af "output/${PRODUCT_NAME}-${PACKAGE_VERSION}.dmg" "releases/macos/${PACKAGE_NAME}-${PACKAGE_VERSION}.dmg"
          ls -al releases/macos/*
          if [[ "$CI_BRANCH" == "master" && -z "$CI_TAG" ]]; then
            yarn github-release -- delete \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --name="${CI_BRANCH}" \
              "*.dmg";
            yarn github-release -- upload \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --name="${CI_BRANCH}" \
              --body="${GIT_COMMIT_LOG}" \
              "releases/macos/${PACKAGE_NAME}-${PACKAGE_VERSION}.dmg";
            rm -f "releases/macos/${PACKAGE_NAME}-${PACKAGE_VERSION}.dmg";
          fi

    test: off

    # Packaging artifacts
    # https://www.appveyor.com/docs/packaging-artifacts
    artifacts:
      - path: releases/macos/*

    # Publishing artifacts to GitHub Releases
    # https://www.appveyor.com/docs/deployment/github
    deploy:
      - provider: GitHub
        auth_token:
          secure: 14dS/9loZ4uMoKGOHGkagaYp5oS30HSIQcPB0FEa7aTEfpb2VJQiUms82hv8nWxY
        draft: false
        prerelease: false
        on:
          appveyor_repo_tag: true  # deploy on tag push only
          nodejs_version: "12"

  # Ubutu
  -
    matrix:
      only:
        - image: Ubuntu
      fast_finish: true

    init:
      - uname -a
      - git --version
      - git config --global core.autocrlf false
      - git config --global user.name "AppVeyor"
      - git config --global user.email "appveyor@ci.appveyor.com"
      - sh: |
          export CI_BRANCH=$APPVEYOR_REPO_BRANCH
          export CI_BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER
          export CI_COMMIT=$APPVEYOR_REPO_COMMIT
          export CI_COMMIT_SHORT=${APPVEYOR_REPO_COMMIT:0:8}
          export CI_COMMIT_TIMESTAMP=$APPVEYOR_REPO_COMMIT_TIMESTAMP
          export CI_TAG=$APPVEYOR_REPO_TAG_NAME
          echo "• ARCH=$ARCH"
          echo "• CI_BRANCH=$CI_BRANCH"
          echo "• CI_BUILD_NUMBER=$CI_BUILD_NUMBER"
          echo "• CI_COMMIT=$CI_COMMIT"
          echo "• CI_COMMIT_SHORT=$CI_COMMIT_SHORT"
          echo "• CI_COMMIT_TIMESTAMP=$CI_COMMIT_TIMESTAMP"
          echo "• CI_TAG=$CI_TAG"

    install:
      - nvm install $nodejs_version
      - sudo apt-get update
      - sudo apt-get install --no-install-recommends -y icnsutils graphicsmagick gcc-multilib g++-multilib rpm
      - npm config set loglevel warn
      - npm config set scripts-prepend-node-path auto
      - npm install -g npm
      - npm install -g yarn
      - yarn

    build_script:
      - sh: |
          yarn clean
          yarn lint
          yarn test
          if [[ -z "$CI_TAG" ]]; then
            yarn build-latest
          else
            yarn build
          fi
      - sh: |
          # build:linux-ia32
          GIT_COMMIT_LOG=`git log -1 --format='%ci %H %s'`
          PACKAGE_NAME=`node -e "console.log(require('./src/package.json').name)"`
          PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
          PRODUCT_NAME=CNCjs
          yarn build:linux-ia32
          ls -al output output/*
          mkdir -p releases/linux
          cp -af "output/${PRODUCT_NAME}-${PACKAGE_VERSION}-i386.AppImage" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage"
          cp -af "output/${PACKAGE_NAME}_${PACKAGE_VERSION}_i386.deb" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb"
          cp -af "output/${PACKAGE_NAME}-${PACKAGE_VERSION}.i686.rpm" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm"
          pushd releases/linux
          ln -sf ../../output/linux-ia32-unpacked "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
          tar zcfh "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz" "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
          rm -f "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
          popd;
          ls -al releases/linux/*
          if [[ "$CI_BRANCH" == "master" && -z "$CI_TAG" ]]; then
            yarn github-release -- delete \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --release-name="${CI_BRANCH}" \
              "*-linux-i386.AppImage" \
              "*-linux-i386.deb" \
              "*-linux.i686.rpm" \
              "*-linux-ia32.tar.gz";
            yarn github-release -- upload \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --release-name="${CI_BRANCH}" \
              --body="${COMMIT_LOG}" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz";
            rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage";
            rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb";
            rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm";
            rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz";
          fi
      - sh: |
          # build:linux-x64
          GIT_COMMIT_LOG=`git log -1 --format='%ci %H %s'`
          PACKAGE_NAME=`node -e "console.log(require('./src/package.json').name)"`
          PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
          PRODUCT_NAME=CNCjs
          yarn build:linux-x64
          ls -al output output/*
          mkdir -p releases/linux
          cp -af "output/${PRODUCT_NAME}-${PACKAGE_VERSION}.AppImage" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage"
          cp -af "output/${PACKAGE_NAME}_${PACKAGE_VERSION}_amd64.deb" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb"
          cp -af "output/${PACKAGE_NAME}-${PACKAGE_VERSION}.x86_64.rpm" "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm"
          pushd releases/linux
          ln -sf ../../output/linux-unpacked "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
          tar zcfh "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz" "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
          rm -f "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
          popd
          ls -al releases/linux/*
          if [[ "$CI_BRANCH" == "master" && -z "$CI_TAG" ]]; then
            yarn github-release -- delete \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --name="${CI_BRANCH}" \
              "*-linux-x86_64.AppImage" \
              "*-linux-amd64.deb" \
              "*-linux.x86_64.rpm" \
              "*-linux-x64.tar.gz";
            yarn github-release -- upload \
              --owner=cncjs \
              --repo=cncjs \
              --tag="${CI_BRANCH}-latest" \
              --name="${CI_BRANCH}" \
              --body="${GIT_COMMIT_LOG}" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm" \
              "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz";
              rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage";
              rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb";
              rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm";
              rm -f "releases/linux/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz";
          fi

    test: off

    # Packaging artifacts
    # https://www.appveyor.com/docs/packaging-artifacts
    artifacts:
      - path: releases/linux/*

    # Publishing artifacts to GitHub Releases
    # https://www.appveyor.com/docs/deployment/github
    deploy:
      - provider: GitHub
        auth_token:
          secure: 14dS/9loZ4uMoKGOHGkagaYp5oS30HSIQcPB0FEa7aTEfpb2VJQiUms82hv8nWxY
        draft: false
        prerelease: false
        on:
          appveyor_repo_tag: true  # deploy on tag push only
          nodejs_version: "12"

  # Visual Studio 2019
  -
    matrix:
      only:
        - image: Visual Studio 2019
      fast_finish: true

    init:
      - git --version
      - git config --global core.autocrlf false
      - git config --global user.name "AppVeyor"
      - git config --global user.email "appveyor@ci.appveyor.com"
      - ps: |
          $env:CI_BRANCH = $env:APPVEYOR_REPO_BRANCH
          $env:CI_BUILD_NUMBER = $env:APPVEYOR_BUILD_NUMBER
          $env:CI_COMMIT = $env:APPVEYOR_REPO_COMMIT
          $env:CI_COMMIT_SHORT = ${env:APPVEYOR_REPO_COMMIT}.SubString(0,8)
          $env:CI_COMMIT_TIMESTAMP = $env:APPVEYOR_REPO_COMMIT_TIMESTAMP
          $env:CI_TAG = $env:APPVEYOR_REPO_TAG_NAME
          Write-Host "• CI_BRANCH=$env:CI_BRANCH"
          Write-Host "• CI_BUILD_NUMBER=$env:CI_BUILD_NUMBER"
          Write-Host "• CI_COMMIT=$env:CI_COMMIT"
          Write-Host "• CI_COMMIT_SHORT=$env:CI_COMMIT_SHORT"
          Write-Host "• CI_COMMIT_TIMESTAMP=$env:CI_COMMIT_TIMESTAMP"
          Write-Host "• CI_TAG=$env:CI_TAG"

    install:
      - ps: Install-Product node $env:nodejs_version $env:platform
      - npm config set loglevel warn
      - npm config set scripts-prepend-node-path auto
      - npm install -g npm
      - npm install -g yarn
      - yarn

    build_script:
      - ps: |
          yarn clean
          yarn lint
          yarn test
          if (-not $env:CI_TAG) {
            yarn build-latest
          } else {
            yarn build
          }
      - ps: |
          # build:win-x64
          $GIT_COMMIT_LOG = git log -1 --format='%ci %H %s'
          $PACKAGE_NAME = node -e "console.log(require('./src/package.json').name)"
          $PACKAGE_VERSION = node -e "console.log(require('./src/package.json').version)"
          $PRODUCT_NAME = "CNCjs"
          mkdir -Force -Path releases\windows
          yarn build:win-x64
          Get-ChildItem output
          Copy-Item "output\${PRODUCT_NAME} Setup ${PACKAGE_VERSION}.exe" "releases\windows\${PACKAGE_NAME}-${PACKAGE_VERSION}-x64.exe"
          Get-ChildItem releases\windows
          if ($env:CI_BRANCH -eq 'master' -And -not $env:CI_TAG) {
            yarn github-release -- delete --owner=cncjs --repo=cncjs --tag="${env:CI_BRANCH}-latest" --release-name="${env:CI_BRANCH}" "*-x64.exe"
            yarn github-release -- upload --owner=cncjs --repo=cncjs --tag="${env:CI_BRANCH}-latest" --release-name="${env:CI_BRANCH}" --body="${GIT_COMMIT_LOG}" "releases\windows\${PACKAGE_NAME}-${PACKAGE_VERSION}-x64.exe"
            Remove-Item "releases\${PACKAGE_NAME}-${PACKAGE_VERSION}-x64.exe"
          }
      - ps: |
          $GIT_COMMIT_LOG = git log -1 --format='%ci %H %s'
          $PACKAGE_NAME = node -e "console.log(require('./src/package.json').name)"
          $PACKAGE_VERSION = node -e "console.log(require('./src/package.json').version)"
          $PRODUCT_NAME = "CNCjs"
          mkdir -Force -Path releases\windows
          yarn build:win-ia32
          Get-ChildItem output
          Copy-Item "output\${PRODUCT_NAME} Setup ${PACKAGE_VERSION}.exe" "releases\windows\${PACKAGE_NAME}-${PACKAGE_VERSION}-ia32.exe"
          Get-ChildItem releases\windows
          if ($env:CI_BRANCH -eq 'master' -And -not $env:CI_TAG) {
            yarn github-release -- delete --owner=cncjs --repo=cncjs --tag="${env:CI_BRANCH}-latest" --release-name="${env:CI_BRANCH}" "*-ia32.exe"
            yarn github-release -- upload --owner=cncjs --repo=cncjs --tag="${env:CI_BRANCH}-latest" --release-name="${env:CI_BRANCH}" --body="${GIT_COMMIT_LOG}" "releases\windows\${PACKAGE_NAME}-${PACKAGE_VERSION}-ia32.exe"
            Remove-Item "releases\${PACKAGE_NAME}-${PACKAGE_VERSION}-ia32.exe"
          }

    test: off

    # Packaging artifacts
    # https://www.appveyor.com/docs/packaging-artifacts
    artifacts:
      - path: releases\windows\*.exe

    # Publishing artifacts to GitHub Releases
    # https://www.appveyor.com/docs/deployment/github
    deploy:
      - provider: GitHub
        auth_token:
          secure: 14dS/9loZ4uMoKGOHGkagaYp5oS30HSIQcPB0FEa7aTEfpb2VJQiUms82hv8nWxY
        draft: false
        prerelease: false
        on:
          appveyor_repo_tag: true  # deploy on tag push only
          nodejs_version: "12"
